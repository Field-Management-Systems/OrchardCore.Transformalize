@model ReportViewModel
@using Microsoft.Extensions.DependencyInjection;
@using Transformalize.Contracts
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Extensions
@using Module

@{
    var auth = Context.RequestServices.GetService<IAuthorizationService>();
}
<style>
    .table-sm > tbody > tr > td {
        padding: 2px;
    }

    div.table-responsive {
        min-height: 600px;
    }

    main.container {
        max-width: 98%;
    }
</style>

@if (await auth.AuthorizeAsync(Context.User, OrchardCore.Contents.Permissions.EditContent)) {
    <button title="edit this report" type="button" class="btn btn-warning btn-sm float-right" onclick="window.open('@(Url.Content("~/Admin/Contents/ContentItems/" + Model.Item.ContentItemId + "/Edit?" + Common.ReturnUrlName + "=" + Context.Request.Path))', '_self');">
        <span class="fas fa-edit"></span>
    </button>
}

<div class="row" style="padding-top: 2px;">

    <h3>Error Log</h3>
    <div class="col-sm-12 table-responsive">
        <table id="id_error_table" class="table table-sm table-hover table-striped">
            <thead>
                <tr>
                    <th title="Time">Time</th>
                    <th title="Level">Level</th>
                    <th title="Message">Message</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in Model.Process.Log) {
                    <tr>
                        <td style="white-space:nowrap;">@entry.Time.ToString("yyyy-MM-dd hh:mm:ss.fff")</td>
                        <td>
                            @switch (entry.LogLevel) {
                                case LogLevel.Info:
                                    <span class="badge badge-info">Info</span>
                                    break;
                                case LogLevel.Debug:
                                    <span class="badge badge-secondary">Debug</span>
                                    break;
                                case LogLevel.Error:
                                    <span class="badge badge-danger">Error</span>
                                    break;
                                case LogLevel.Warn:
                                    <span class="badge badge-warning">Warning</span>
                                    break;
                                default:
                                    <span class="badge badge-light">None</span>
                                    break;
                            }

                        </td>
                        <td>@entry.Message</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


</div>
